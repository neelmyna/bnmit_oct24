https://github.com/neelmyna/bnmit_oct24

1. Create github account and login
2. Create new Repo Name: <yourname_python_oct24>
3. Create folder software in C drive and dedicated folders to save the installer files
4. Download the following Apps
	1. notepad++ (faster and easier way to make notes)
	2. vs code (easiest IDE to use)
	3. mysql
	4. python
5. Create PAT in github
	Click on Top Right profile icon
	In the menu (pops up), scroll down and Click settings
	In the new page, Scroll down and Click Developer settings (bottom left)
	In the new page, on top left, Click Personal Access Tokens -> Select Tokens(Classic)
	Now Click Generate new Token -> Select Generate new Token(Classic)
	Enter password if prompted
	Select Expiry -> NO Expiry
	Leave all other settings as it is. Scroll Down and Click Generate Token
	Copy the PAT and mail/whatsApp it to your self
6. Create a folder learning
	sub folder python_learning
	Go inside this folder and open the command prompt
7. Download and install git
8.  git config --global username "<your_github_username>"
	git config --global email "<your_email>"
9. If we wish to download somebody's (anybody's) repo then the command is:
	git clone <git_repo_url>
9. To Sync our Repo and the repo folder in our machine(laptop) the command is:
	git clone https://PAT@github.com/<username>/<repo_name>
	
Why in Pyhton there is no implicit cast?
-----------------------------------------
# Program to check if a number if Even

print('Enter a number to check if it is Even: ')
input_num = int(input())

if input_num % 2 == 0:
    print('Input number', input_num, ' is Even')
--------------------------------------------
# Program to check if a number if Even or not.

print('Enter a number to check if it is Even: ')
input_num = int(input())

if input_num % 2 == 0:
    print('Input number', input_num, ' is Even')
else:
    print('Input number', input_num, ' is not Even')
------------------------------------------------
# Program to check if a number if Even or Odd.

print('Enter a number to check if it is Even: ')
input_num = int(input())

if input_num % 2 == 0:
    print('Input number', input_num, ' is Even')
else:
    print('Input number', input_num, ' is Odd')
---------------------------------------------
'''
Accept average score from the user and print the result as follows.
0  - 50 Fail
51 - 75 SC
76 - 90 FC
91 - 100 Distinction
Also check for Invalid score
'''

average_score = int(input('Enter your average score to print your result: '))

if average_score >= 0 and average_score <= 50:
    print('Fail')
elif  average_score <= 75:
    print('Second Class')
elif average_score <= 90:
    print('First Class')
elif average_score <= 100:
    print('Distinction')
else:
    print('Invalid Input')

# x++ != y && --y > z || y++ <= x
-----------------------------------------------------
i = -1
i -= -1 # i = i - (-1) = -1 + 1 = 0
print(i)
------------------------------------
p4.py
import random

player_number = int(input('Enter a number of your choice between 0 to 9: '))

system_number = random.randint(9, 10)
print(system_number)

if player_number == system_number:
    print('You are crorepati')
else:
    print('You are Roadpati')
----------------------------------------------
ASSIGNMENTS:
5. Check if the year is Leap year
6. Check if the input digit is Composite number
7. Check if the character is only a alpha-numeric

Examples of Functions:
print()
len()
type()
sorted()
max()
min()

When to call a function as method:
obj.method()
str.upper()
list1.sort()

The range() function
range(end_value)
range(start_value, end_value)
range(start_value, end_value, increment)

*** In Python we do not have the concept of Function Overloading
range(10)
0, 1, .... 9 [default increment is 1]
range(2, 15)
2, 3, ..... 14 [default increment is 1]
range(5, 25, 3)
5, 8, 11, 14, 17, 20, 23 [manual/over-ridden increment is 3]
range(5, 20, -1)
Returns nothing
range(25, 2, -2)
25, 23, 21, .... 3 [manual increment of -2 or decrement of 2]

for i in range(1, 21):
    i += 2
    print(i)
# 3, 6, 9, .... 18 (our prediction)
# 3, 4, 5, ... 22 (actual o/p)

O/P Formating using Format specifiers in C
%f %s %d %x %X %o
%4d
%-5d
%06d

p8.py
Print the Math tabl of a number for multiples upto 20
input_number = int(input('Enter a number to print its Math table: '))

for i in range(1, 21):
    #print(input_number, '*', i, '=', input_number * i)
    print('%2d * %02d = %03d'%(input_number, i, input_number*i))

'''
12 * 1 = 12
12 * 2 = 24
'''
-------------------------------------------------
9. Accept a number and find sum of digits of the number
10.Accept a number and find count the number of digits in it.
11.Accept a number and find biggest/smallest digit in the number
12.Find sum of Even/Odd digits in the number
13.Find the frequency of a digit in the number

14.Find sum of Odd placed Even digits in the number
15.Find 2nd smallest digit in the number
16.Accept a number from user and find her lucky digit, where the lucky digit is found by finding sum of the digits of the number until a sigle digit number is reached. Thus if the sum is not a single digit number, apply the logic of finding sum of the digits on it.
input_number = int(input('Enter a number to find your lucky digit: '))

sum_of_digits = 0
temp_number = input_number

while temp_number > 0:
    remainder_digit = temp_number % 10
    temp_number = temp_number // 10
    sum_of_digits += remainder_digit
    if temp_number == 0 and sum_of_digits >= 10:
        temp_number = sum_of_digits
        sum_of_digits = 0
print(f'Your lucky digit is {sum_of_digits}')
--------------------------------------------------------
DAY3 WEDNESDAY 23-10-2024
HOW TO SOLVE A PROBLEM

1. Understand the problem. Recognise the required data (I/P). Isolate/remove the unwanted information and data. Focus on the relevant information. Accertain what should be the O/P.
Outcome: We know the I/P, O/P and the relevant information

2. Build the solution using trial and error technique or mathematical formula or using a specific Algorithm. In this step we must not even think of programming.
OutCome: We know the what is the solution(s)

3. Write the Algorithm. Every step of the algorithm must be simple, unambigious and finite.
OutCome: We have a clear visible solution as a procedure

4. Write the Fake-code (Pseudocode) 
OutCome: You have a solution that looks like a code

5. Code it (via the languiage syntax)

6. Good coding practices, naming standards, documentation, unit-testing

7. Efficiency of algorithms, Optimization, development, DEvOps, Cyber Security, Installation, Maintainance

SRP
i++
j--
a[i] = b[j]
b[j]++

a[++i] = b[--j]++

Write a program in Python to check if a number is Perfect Square

45   6.6   6   36
121  11.0  11  121

1. Read N
2. find ROOT_WITH_PRECISION of N
3. find floor of ROOT_WITH_PRECISION as ROOT
4. if ROOT * ROOT is N
	then declare N as P S
	else declare N as not a P S
	
Read N
root = square_root(N)
root = floor(root)
if root * root is N then
	print N is P S
else
	print N is not a P S
	
string

1111 1111
f    f
ff
15*16(1) + 15*16(0)
=240 + 15
=255

10
100
1011

17. Accept a string and access all the characters one by one
my_string = input('Enter a place name: ')

print(f'Type of {my_string} is {type(my_string)}')

for character in my_string: # for each loop
    print(f'{character}, Type={type(character)}')

first_character = chr(my_string[0])
print(f'first charatcer = {first_character}, Type = {type(character)}')
----------------------------------------------
18.
my_string = input('Enter a place name: ') # mumbai

my_string = my_string.upper()
print(f'my_string = {my_string}')
#print(f'string1 = {string1}')

# print(f'String in Upper case = {my_string.upper()}')
----------------------------------------
19.
number1 = 15
number2 = 25.5

print(f'type of number1 = {type(number1)}')
print(f'type of number2 = {type(number2)}')

print(number1.bit_count)
print(number1.__sizeof__())
print(number1.__eq__(15))
-----------------------------------------
20.
my_str = 'bengaluru'

print(my_str[0])   # b
print(my_str[1])   # e
print(my_str[-1])   # u
print(my_str[-2])   # r
print(my_str[-12])   # IndexError
print(my_str[100]) # IndexError
-----------------------------------------------
21.
# String Slicing

my_str = 'bengaluru'
print(my_str[:])
print(my_str[::])

print(my_str[1:8])   # engalur
print(my_str[2:6:2]) # na
print(my_str[::2]) # bnauu
print(my_str[::-2]) # uuanb
print(my_str[::-1]) # urulagneb
--------------------------------------------
22.
# String Slicing

my_str = 'bengaluru'

print(my_str[:20:1]) # No error
print(my_str[20:-20:1]) # empty string
print(my_str[20:-20:1]) # complete string in reverse
---------------------------------------------------------
23.
my_str = 'banashankari'

print(my_str.find('s')) # 4
print(my_str.find('m')) # -1
print(my_str.find('shankari')) # 4
print(my_str.find('a', 3)) # 3
print(my_str.find('na', 1, 4)) # 2
print(my_str.find('na', 1, 3)) # -1
----------------------------------------------------
24.
my_str = 'banashankari'

print(my_str.index('s')) # 4
print(my_str.index('shankari')) # 4
print(my_str.index('a', 3)) # 3
print(my_str.index('na', 1, 4)) # 2
print(my_str.index('na', 1, 3)) # error
print(my_str.index('m')) # error
---------------------------------------------------
Arithmetic Operators:
+ - * / %
All are binary operators
Used with Infix Notation
Input are numbers
Output is number
Type of both the operands must be same
2 + 17 - 15
Arithmetic operators/operations have Left to Right Associtivity
2 - 17 * 15
The higher precedence operators/operations happens 1st, even though the operator appreas lately in the arithmetic expression. In the above expression, 17 * 15 is calculated 1st.
The intermediatre result of an arithmetic expression is stored in the special purpose register named "Accumalator"

34 + 45
34 + (-45)

25 + 25.55


num1 = 34
num2 = -45

0010 0010
1 * 2(5) + 2
= 32 + 2 
= 34

HOW NEGATIVE NUMBER IS STORED:
Now take -45
take its absolute
take its 2's Compliment
0010 1101
1101 0010

1101 0011
-1 * 2(7) + 1 * 2(6) + 16 + 3
-128 + 64 + 19
-64 + 19
= -45

25.
Find the biggest of 3 distinct numbers

input_num1 = int(input('Enter 1st number: '))
input_num2 = int(input('Enter 2nd number: '))
input_num3 = int(input('Enter 3rd number: '))

if input_num1 > input_num2 and input_num1 > input_num3:
    print(f'Num1 = {input_num1} is the biggest number')
elif input_num2 > input_num3:
    print(f'Num2 = {input_num21} is the biggest number')
else:
    print(f'Num3 = {input_num3} is the biggest number')
------------------------------------------------
26.
Find sum of the series:
n + n2 + n3 + upto 10 terms
27.
Find sum of the series:
1 - n + n2 - n3 + upto M terms
28.
Find sum of the series:
1 - n/3 + n2/5 - n4/7 + n8/9 ....
(1<n<5 and 1<m<10)
29.
Print the Nth Prime number
30.
Check if the sum of Prime digits in a number is a Prime number
31.
Print Nth term of the following series:
1 2 2 3 3 5 5 7 8 11 13 13
---------------------------------------
Find sum of Even Placed Odd Digits in a number
1. Read NUM
2. if NUM is less than 10 then
	Print Result = NUM
3. else do the following:
	sum1 = 0 
	sum2 = 0
	count_of_digits = 0
	switch = true
	while NUM is greater than Zero:
		remainder_digit = NUM // 10
		if switch:
			sum1 += remainder_digit
		else:
			sum2 += remainder_digit
		switch = !switch
		count_of_digits += 1
	if count_of_digits % 2 == 0:	
		Result = sum2
	else:
		Result = sum1
---------------------------------------------------
# Find sum of the series:
# n - n2/3 + n4/5 - n8/7 .....
# (1<n<5 and 1<m<10)
'''
n = int(input('Enter the N value: '))
m = int(input('Enter numbers of terms in the series: '))
# check for invalid input data
if (n <= 1 or n >= 5) and (m <= 1 or m >= 10):
    print('Invalid data entered')
    exit('End of Program')

# For valid input data:
sum = 0
for i in range(m):
    sum += (n ** 2 ** i) / (2 * i + 1) * ((-1) ** i)
    print('sum = ', sum, 'i = ', i)

print('Sum of the terms is ', sum)
--------------------------------------------------
31.
Find Nth term of combined series:
1 2 2 3 3 5 5 7 8 11 13 13

--------------------------------------------------
32. Check if a number is a Palindrome
33. Find sum of 1st and last digits of a number
34. Print Nth digit of a number (starting from Left)
35. Print Nth digit of a number (starting from Right)
36. Accpet the number of Lines from the user and print the following shapes:
37. Right Angled Triangle
38. Equilateral Triangle
39. Square
40. Empty Square
41. Empty Equilateral Triangle
42. Empty Rhombus
43. Hexagon
44. X shape
45. X shape inside Empty Square
46. Pascal Triangle
--------------------------------------------------
47
my_str = 'banashankari'
sub_string = 'm'

try:
    print(my_str.index('s')) # 4
    print(my_str.index(sub_string)) # error
    print(my_str.index('shankari')) 
except ValueError as e:
    print(f'The sub string {sub_string} not found')
    print(e.__str__())
except:
    print('Some error occured')
--------------------------------------------------
DAY4 THURSDAY 24-10-2024

List DS in Python:

It is simplest DS in Python
All elements of the list are stored in contigious memory locations.
The List grows and shrinks dynamically
List is ordered (we use subscript [] to access list elements)
List is mutable
Lists are passed to functions by reference
For the user, lookup(accessing), addition and deletion of elements is O(1) efficiency.
We can create lists inside list
list provides lot of methods such as append(), insert(), pop() remove(), sort()
We can do list slicing
-------------------------------
numbers1 = []
numbers2 = list()
numbers3 = [1, 2, 3, 4, 5]
numbers4 = list(numbers3)
numbers5 = list(numbers3[1:4])

print(numbers1)
print(numbers2)
print(numbers3)
print(numbers4)
print(numbers5)
------------------------------------
input_size = int(input('Enter size of the Array: '))
numbers = []
for i in range(input_size):
    number = int(input())
    numbers.append(number)
    # numbers.append(int(input()))

print('The array is: ', numbers)

print(f'The array of size {input_size} is:')
for number in numbers:
    print(number, end='  ')
----------------------------------------------------
print('Enter space seperated numbers in a line')
user_input = input()
print(type(user_input))
----------------------------------------------------
numbers = [int(number) for number in user_input.split()]
print('The array is: ', numbers)

import sys
# Command line Args
# Find biggest and smallest numbers among the numbers given by user

print('User given numbers are: ', sys.argv)

----------------------------------------------------
print('Enter space seperated numbers in a line')

numbers = [int(number) for number in input().split()]
print('The array is: ', numbers)


----------------------------------------------------

----------------------------------------------------